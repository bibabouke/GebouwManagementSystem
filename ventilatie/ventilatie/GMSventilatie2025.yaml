blueprint:
  name: GMS Ventilatiesysteem v5.16
  description: >
    Regelt kamertemperatuur automatisch met buitenlucht via ventilatoren.
    Kies tussen een weersensor of een losse buitentemperatuursensor.
  domain: automation

  input:
    fan_switch:
      name: Ventilator Schakelaar
      description: "De ventilator die wordt bestuurd."
      selector:
        entity:
          domain: switch

    temp_sensor:
      name: Temperatuursensor Binnen
      description: "De sensor die de binnentemperatuur meet."
      selector:
        entity:
          domain: sensor
          device_class: temperature

    weather_entity:
      name: Weersensor (zoals Buienradar)
      description: >
        Wordt gebruikt als je géén losse buitensensor selecteert.
        Temperatuur wordt uitgelezen via `state_attr('weather.x', 'temperature')`.
      default: weather.buienradar
      selector:
        entity:
          domain: weather

    outside_temp_sensor:
      name: Losse Temperatuursensor Buiten (optioneel)
      description: >
        Vul deze in als je een specifieke buitensensor wilt gebruiken in plaats van een weersensor.
      default: ''
      selector:
        entity:
          domain: sensor
          device_class: temperature

    desired_temp:
      name: Gewenste Kamertemperatuur
      default: 21.0
      selector:
        number:
          min: 10
          max: 30
          step: 0.5
          unit_of_measurement: "°C"

    hysteresis:
      name: Hysteresis
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 5.0
          step: 0.1
          unit_of_measurement: "°C"

    update_interval:
      name: Update Interval / Minimale Schakeltijd
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: "minuten"

variables:
  fan_switch_entity_id: !input fan_switch
  temp_sensor_entity_id: !input temp_sensor
  weather_entity_id: !input weather_entity
  outside_temp_sensor_entity_id: !input outside_temp_sensor
  desired_temp_value: !input desired_temp
  hysteresis_value: !input hysteresis
  update_interval_minutes: !input update_interval

  binnentemperatuur: >
    {% set temp = states(temp_sensor_entity_id) %}
    {{ temp | float(21.0) }}

  buiten_temp: >
    {% if outside_temp_sensor_entity_id %}
      {% set temp = states(outside_temp_sensor_entity_id) %}
      {{ temp | float(15.0) }}
    {% else %}
      {% set temp = state_attr(weather_entity_id, 'temperature') %}
      {{ temp | float(15.0) }}
    {% endif %}

triggers:
  - platform: state
    entity_id: !input temp_sensor
  - platform: state
    entity_id: !input weather_entity
  - platform: state
    entity_id: !input outside_temp_sensor

conditions: []

actions:
  - service: system_log.write
    data:
      message: >
        Ventilatiecontrole: Buiten {{ buiten_temp }}°C, Binnen {{ binnentemperatuur }}°C,
        Ventilator is {{ states(fan_switch_entity_id) }}.
      level: info

  - variables:
      tijd_sinds_laatste_schakeling: >
        {{ (as_timestamp(now()) - as_timestamp(states[fan_switch_entity_id].last_changed)) / 60 }}

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ binnentemperatuur > desired_temp_value + hysteresis_value
                 and buiten_temp < binnentemperatuur
                 and is_state(fan_switch_entity_id, 'off') }}
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input fan_switch

      - conditions:
          - condition: template
            value_template: >
              {{ (binnentemperatuur <= desired_temp_value)
                 or (buiten_temp > desired_temp_value and binnentemperatuur <= buiten_temp)
                 and is_state(fan_switch_entity_id, 'on') }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input fan_switch

  - delay: "{{ update_interval_minutes * 60 }}"

mode: restart
